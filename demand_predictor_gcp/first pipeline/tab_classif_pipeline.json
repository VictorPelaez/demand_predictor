{
  "pipelineSpec": {
    "components": {
      "comp-automltabulartrainingjob-run": {
        "executorLabel": "exec-automltabulartrainingjob-run",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "column_transformations": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-classif-model-eval-metrics": {
        "executorLabel": "exec-classif-model-eval-metrics",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "api_endpoint": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "thresholds_dict_str": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "metricsc": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "dep_decision": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-deploy-decision-1": {
        "dag": {
          "tasks": {
            "model-deploy": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-deploy"
              },
              "inputs": {
                "artifacts": {
                  "model": {
                    "componentInputArtifact": "pipelineparam--automltabulartrainingjob-run-model"
                  }
                },
                "parameters": {
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  }
                }
              },
              "taskInfo": {
                "name": "model-deploy"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--automltabulartrainingjob-run-model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--classif-model-eval-metrics-dep_decision": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-deploy": {
        "executorLabel": "exec-model-deploy",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-tabulardataset-create": {
        "executorLabel": "exec-tabulardataset-create",
        "inputDefinitions": {
          "parameters": {
            "bq_source": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-automltabulartrainingjob-run": {
          "container": {
            "args": [
              "--init.optimization_prediction_type",
              "classification",
              "--method.budget_milli_node_hours",
              "1000",
              "--method.target_column",
              "Class",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}",
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--init.column_transformations",
              "{{$.inputs.parameters['column_transformations']}}",
              "--method.dataset",
              "{{$.inputs.artifacts['dataset'].uri}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.remote.aiplatform.remote_runner",
              "--cls_name",
              "AutoMLTabularTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.1.6"
          }
        },
        "exec-classif-model-eval-metrics": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "classif_model_eval_metrics"
            ],
            "command": [
              "sh",
              "-c",
              "(python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.2' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef classif_model_eval_metrics(\n    project: str,\n    location: str,  # \"us-central1\",\n    api_endpoint: str,  # \"us-central1-aiplatform.googleapis.com\",\n    thresholds_dict_str: str,\n    model: Input[Model],\n    metrics: Output[Metrics],\n    metricsc: Output[ClassificationMetrics],\n) -> NamedTuple(\"Outputs\", [(\"dep_decision\", str)]):  # Return parameter.\n\n    \"\"\"This function renders evaluation metrics for an AutoML Tabular classification model.\n    It retrieves the classification model evaluation generated by the AutoML Tabular training\n    process, does some parsing, and uses that info to render the ROC curve and confusion matrix\n    for the model. It also uses given metrics threshold information and compares that to the\n    evaluation results to determine whether the model is sufficiently accurate to deploy.\n    \"\"\"\n    import json\n    import logging\n\n    from google.cloud import aiplatform\n\n    # Fetch model eval info\n    def get_eval_info(client, model_name):\n        from google.protobuf.json_format import MessageToDict\n\n        response = client.list_model_evaluations(parent=model_name)\n        metrics_list = []\n        metrics_string_list = []\n        for evaluation in response:\n            print(\"model_evaluation\")\n            print(\" name:\", evaluation.name)\n            print(\" metrics_schema_uri:\", evaluation.metrics_schema_uri)\n            metrics = MessageToDict(evaluation._pb.metrics)\n            for metric in metrics.keys():\n                logging.info(\"metric: %s, value: %s\", metric, metrics[metric])\n            metrics_str = json.dumps(metrics)\n            metrics_list.append(metrics)\n            metrics_string_list.append(metrics_str)\n\n        return (\n            evaluation.name,\n            metrics_list,\n            metrics_string_list,\n        )\n\n    # Use the given metrics threshold(s) to determine whether the model is \n    # accurate enough to deploy.\n    def classification_thresholds_check(metrics_dict, thresholds_dict):\n        for k, v in thresholds_dict.items():\n            logging.info(\"k {}, v {}\".format(k, v))\n            if k in [\"auRoc\", \"auPrc\"]:  # higher is better\n                if metrics_dict[k] < v:  # if under threshold, don't deploy\n                    logging.info(\n                        \"{} < {}; returning False\".format(metrics_dict[k], v)\n                    )\n                    return False\n        logging.info(\"threshold checks passed.\")\n        return True\n\n    def log_metrics(metrics_list, metricsc):\n        test_confusion_matrix = metrics_list[0][\"confusionMatrix\"]\n        logging.info(\"rows: %s\", test_confusion_matrix[\"rows\"])\n\n        # log the ROC curve\n        fpr = []\n        tpr = []\n        thresholds = []\n        for item in metrics_list[0][\"confidenceMetrics\"]:\n            fpr.append(item.get(\"falsePositiveRate\", 0.0))\n            tpr.append(item.get(\"recall\", 0.0))\n            thresholds.append(item.get(\"confidenceThreshold\", 0.0))\n        print(f\"fpr: {fpr}\")\n        print(f\"tpr: {tpr}\")\n        print(f\"thresholds: {thresholds}\")\n        metricsc.log_roc_curve(fpr, tpr, thresholds)\n\n        # log the confusion matrix\n        annotations = []\n        for item in test_confusion_matrix[\"annotationSpecs\"]:\n            annotations.append(item[\"displayName\"])\n        logging.info(\"confusion matrix annotations: %s\", annotations)\n        metricsc.log_confusion_matrix(\n            annotations,\n            test_confusion_matrix[\"rows\"],\n        )\n\n        # log textual metrics info as well\n        for metric in metrics_list[0].keys():\n            if metric != \"confidenceMetrics\":\n                val_string = json.dumps(metrics_list[0][metric])\n                metrics.log_metric(metric, val_string)\n        # metrics.metadata[\"model_type\"] = \"AutoML Tabular classification\"\n\n    logging.getLogger().setLevel(logging.INFO)\n    aiplatform.init(project=project)\n    # extract the model resource name from the input Model Artifact\n    model_resource_path = model.uri.replace(\"aiplatform://v1/\", \"\")\n    logging.info(\"model path: %s\", model_resource_path)\n\n    client_options = {\"api_endpoint\": api_endpoint}\n    # Initialize client that will be used to create and send requests.\n    client = aiplatform.gapic.ModelServiceClient(client_options=client_options)\n    eval_name, metrics_list, metrics_str_list = get_eval_info(\n        client, model_resource_path\n    )\n    logging.info(\"got evaluation name: %s\", eval_name)\n    logging.info(\"got metrics list: %s\", metrics_list)\n    log_metrics(metrics_list, metricsc)\n\n    thresholds_dict = json.loads(thresholds_dict_str)\n    deploy = classification_thresholds_check(metrics_list[0], thresholds_dict)\n    if deploy:\n        dep_decision = \"true\"\n    else:\n        dep_decision = \"false\"\n    logging.info(\"deployment decision is %s\", dep_decision)\n\n    return (dep_decision,)\n\n"
            ],
            "image": "gcr.io/deeplearning-platform-release/tf2-cpu.2-3:latest"
          }
        },
        "exec-model-deploy": {
          "container": {
            "args": [
              "--method.machine_type",
              "n1-standard-4",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['endpoint'].uri}}",
              "--init.model_name",
              "{{$.inputs.artifacts['model'].uri}}",
              "--init.project",
              "{{$.inputs.parameters['project']}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.remote.aiplatform.remote_runner",
              "--cls_name",
              "Model",
              "--method_name",
              "deploy"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.1.6"
          }
        },
        "exec-tabulardataset-create": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['dataset'].uri}}",
              "--method.project",
              "{{$.inputs.parameters['project']}}",
              "--method.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--method.bq_source",
              "{{$.inputs.parameters['bq_source']}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.remote.aiplatform.remote_runner",
              "--cls_name",
              "TabularDataset",
              "--method_name",
              "create"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:0.1.6"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "automl-tab-beans-training-v2"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "classif-model-eval-metrics-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "classif-model-eval-metrics"
                }
              ]
            },
            "classif-model-eval-metrics-metricsc": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metricsc",
                  "producerSubtask": "classif-model-eval-metrics"
                }
              ]
            }
          }
        },
        "tasks": {
          "automltabulartrainingjob-run": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-automltabulartrainingjob-run"
            },
            "dependentTasks": [
              "tabulardataset-create"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset",
                    "producerTask": "tabulardataset-create"
                  }
                }
              },
              "parameters": {
                "column_transformations": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[{\"numeric\": {\"column_name\": \"Area\"}}, {\"numeric\": {\"column_name\": \"Perimeter\"}}, {\"numeric\": {\"column_name\": \"MajorAxisLength\"}}, {\"numeric\": {\"column_name\": \"MinorAxisLength\"}}, {\"numeric\": {\"column_name\": \"AspectRation\"}}, {\"numeric\": {\"column_name\": \"Eccentricity\"}}, {\"numeric\": {\"column_name\": \"ConvexArea\"}}, {\"numeric\": {\"column_name\": \"EquivDiameter\"}}, {\"numeric\": {\"column_name\": \"Extent\"}}, {\"numeric\": {\"column_name\": \"Solidity\"}}, {\"numeric\": {\"column_name\": \"roundness\"}}, {\"numeric\": {\"column_name\": \"Compactness\"}}, {\"numeric\": {\"column_name\": \"ShapeFactor1\"}}, {\"numeric\": {\"column_name\": \"ShapeFactor2\"}}, {\"numeric\": {\"column_name\": \"ShapeFactor3\"}}, {\"numeric\": {\"column_name\": \"ShapeFactor4\"}}, {\"categorical\": {\"column_name\": \"Class\"}}]"
                    }
                  }
                },
                "display_name": {
                  "componentInputParameter": "display_name"
                },
                "project": {
                  "componentInputParameter": "project"
                }
              }
            },
            "taskInfo": {
              "name": "automltabulartrainingjob-run"
            }
          },
          "classif-model-eval-metrics": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-classif-model-eval-metrics"
            },
            "dependentTasks": [
              "automltabulartrainingjob-run"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "automltabulartrainingjob-run"
                  }
                }
              },
              "parameters": {
                "api_endpoint": {
                  "componentInputParameter": "api_endpoint"
                },
                "location": {
                  "componentInputParameter": "gcp_region"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "thresholds_dict_str": {
                  "componentInputParameter": "thresholds_dict_str"
                }
              }
            },
            "taskInfo": {
              "name": "classif-model-eval-metrics"
            }
          },
          "condition-deploy-decision-1": {
            "componentRef": {
              "name": "comp-condition-deploy-decision-1"
            },
            "dependentTasks": [
              "automltabulartrainingjob-run",
              "classif-model-eval-metrics"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--automltabulartrainingjob-run-model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "automltabulartrainingjob-run"
                  }
                }
              },
              "parameters": {
                "pipelineparam--classif-model-eval-metrics-dep_decision": {
                  "taskOutputParameter": {
                    "outputParameterKey": "dep_decision",
                    "producerTask": "classif-model-eval-metrics"
                  }
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                }
              }
            },
            "taskInfo": {
              "name": "condition-deploy-decision-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--classif-model-eval-metrics-dep_decision'].string_value == 'true'"
            }
          },
          "tabulardataset-create": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-tabulardataset-create"
            },
            "inputs": {
              "parameters": {
                "bq_source": {
                  "componentInputParameter": "bq_source"
                },
                "display_name": {
                  "componentInputParameter": "display_name"
                },
                "project": {
                  "componentInputParameter": "project"
                }
              }
            },
            "taskInfo": {
              "name": "tabulardataset-create"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "api_endpoint": {
            "type": "STRING"
          },
          "bq_source": {
            "type": "STRING"
          },
          "display_name": {
            "type": "STRING"
          },
          "gcp_region": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "thresholds_dict_str": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "classif-model-eval-metrics-metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "classif-model-eval-metrics-metricsc": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.2"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://vpproyecto2021-bucket/pipeline_root/",
    "parameters": {
      "api_endpoint": {
        "stringValue": "us-central1-aiplatform.googleapis.com"
      },
      "bq_source": {
        "stringValue": "bq://aju-dev-demos.beans.beans1"
      },
      "display_name": {
        "stringValue": "automl-beans1632480973"
      },
      "gcp_region": {
        "stringValue": "us-central1"
      },
      "project": {
        "stringValue": "vpproyecto2021"
      },
      "thresholds_dict_str": {
        "stringValue": "{\"auRoc\": 0.95}"
      }
    }
  }
}